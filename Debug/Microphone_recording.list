
Microphone_recording.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003258  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800340c  0800340c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003414  08003414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800341c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003428  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b10  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de9  00000000  00000000  00029b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  0002b938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015826  00000000  00000000  0002c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000099df  00000000  00000000  000421e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008252d  00000000  00000000  0004bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce0f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  000ce170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033d4 	.word	0x080033d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080033d4 	.word	0x080033d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x3c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200e      	movs	r0, #14
 80004fc:	f000 fc77 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000500:	200e      	movs	r0, #14
 8000502:	f000 fc90 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a2c      	ldr	r2, [pc, #176]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <MX_GPIO_Init+0xd0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a25      	ldr	r2, [pc, #148]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <MX_GPIO_Init+0xd0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2120      	movs	r1, #32
 800059e:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MX_GPIO_Init+0xd4>)
 80005a0:	f001 f8c6 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_GPIO_Init+0xd8>)
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <MX_GPIO_Init+0xdc>)
 80005ba:	f000 ff37 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005be:	2320      	movs	r3, #32
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0xd4>)
 80005d6:	f000 ff29 	bl	800142c <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020000 	.word	0x40020000
 80005ec:	10210000 	.word	0x10210000
 80005f0:	40020800 	.word	0x40020800

080005f4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_I2S2_Init+0x54>)
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <MX_I2S2_Init+0x58>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2S2_Init+0x54>)
 8000600:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000604:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_I2S2_Init+0x54>)
 8000608:	2210      	movs	r2, #16
 800060a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2S2_Init+0x54>)
 800060e:	2203      	movs	r2, #3
 8000610:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_I2S2_Init+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_I2S2_Init+0x54>)
 800061a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800061e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2S2_Init+0x54>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_I2S2_Init+0x54>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2S2_Init+0x54>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_I2S2_Init+0x54>)
 8000634:	f001 f896 	bl	8001764 <HAL_I2S_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800063e:	f000 f977 	bl	8000930 <Error_Handler>
  }

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000088 	.word	0x20000088
 800064c:	40003800 	.word	0x40003800

08000650 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a3f      	ldr	r2, [pc, #252]	; (800076c <HAL_I2S_MspInit+0x11c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d178      	bne.n	8000764 <HAL_I2S_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <HAL_I2S_MspInit+0x120>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a3d      	ldr	r2, [pc, #244]	; (8000770 <HAL_I2S_MspInit+0x120>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <HAL_I2S_MspInit+0x120>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <HAL_I2S_MspInit+0x120>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a36      	ldr	r2, [pc, #216]	; (8000770 <HAL_I2S_MspInit+0x120>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <HAL_I2S_MspInit+0x120>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <HAL_I2S_MspInit+0x120>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <HAL_I2S_MspInit+0x120>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_I2S_MspInit+0x120>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c6:	2308      	movs	r3, #8
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d6:	2305      	movs	r3, #5
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <HAL_I2S_MspInit+0x124>)
 80006e2:	f000 fea3 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006f8:	2305      	movs	r3, #5
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <HAL_I2S_MspInit+0x128>)
 8000704:	f000 fe92 	bl	800142c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <HAL_I2S_MspInit+0x130>)
 800070c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000726:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800074a:	f000 fb87 	bl	8000e5c <HAL_DMA_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_I2S_MspInit+0x108>
    {
      Error_Handler();
 8000754:	f000 f8ec 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_I2S_MspInit+0x12c>)
 800075c:	63da      	str	r2, [r3, #60]	; 0x3c
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_I2S_MspInit+0x12c>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40003800 	.word	0x40003800
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020400 	.word	0x40020400
 800077c:	20000028 	.word	0x20000028
 8000780:	40026058 	.word	0x40026058

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 f9e4 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f82c 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff fec0 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000794:	f7ff fe9e 	bl	80004d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000798:	f000 f940 	bl	8000a1c <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800079c:	f7ff ff2a 	bl	80005f4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  l_a0 = 0.02626886780204638;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0x40>)
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <main+0x44>)
 80007a4:	601a      	str	r2, [r3, #0]
  l_a1 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <main+0x48>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
  l_a2 = -0.02626886780204638;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <main+0x4c>)
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <main+0x50>)
 80007b2:	601a      	str	r2, [r3, #0]
  l_b1 = -1.6396718593315593;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <main+0x54>)
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <main+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  l_b2 = 0.9474622643959073;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <main+0x5c>)
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <main+0x60>)
 80007be:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0x3c>
 80007c2:	bf00      	nop
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	3cd731cf 	.word	0x3cd731cf
 80007cc:	200000f4 	.word	0x200000f4
 80007d0:	200000e4 	.word	0x200000e4
 80007d4:	bcd731cf 	.word	0xbcd731cf
 80007d8:	200000ec 	.word	0x200000ec
 80007dc:	bfd1e0c4 	.word	0xbfd1e0c4
 80007e0:	200000d4 	.word	0x200000d4
 80007e4:	3f728ce3 	.word	0x3f728ce3

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b098      	sub	sp, #96	; 0x60
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fde4 	bl	80033c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <SystemClock_Config+0x100>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <SystemClock_Config+0x100>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <SystemClock_Config+0x100>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <SystemClock_Config+0x104>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <SystemClock_Config+0x104>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0x104>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000870:	2348      	movs	r3, #72	; 0x48
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000878:	2303      	movs	r3, #3
 800087a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fc05 	bl	8002090 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800088c:	f000 f850 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	2102      	movs	r1, #2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fe5e 	bl	8002570 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008ba:	f000 f839 	bl	8000930 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008be:	2301      	movs	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008c2:	2332      	movs	r3, #50	; 0x32
 80008c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f840 	bl	8002954 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008da:	f000 f829 	bl	8000930 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3760      	adds	r7, #96	; 0x60
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef * hi2s2){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	convertedSample = ((micSample[0]<<16)|micSample[1]);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_I2S_RxCpltCallback+0x34>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	041b      	lsls	r3, r3, #16
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_I2S_RxCpltCallback+0x34>)
 8000902:	8852      	ldrh	r2, [r2, #2]
 8000904:	b292      	uxth	r2, r2
 8000906:	4313      	orrs	r3, r2
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_I2S_RxCpltCallback+0x38>)
 800090a:	6013      	str	r3, [r2, #0]
	index++;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_I2S_RxCpltCallback+0x3c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_I2S_RxCpltCallback+0x3c>)
 8000914:	6013      	str	r3, [r2, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200000e8 	.word	0x200000e8
 8000928:	200000f8 	.word	0x200000f8
 800092c:	200000f0 	.word	0x200000f0

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000936:	e7fe      	b.n	8000936 <Error_Handler+0x6>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f910 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA1_Stream3_IRQHandler+0x10>)
 80009e2:	f000 fae9 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000028 	.word	0x20000028

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SystemInit+0x28>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <SystemInit+0x28>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SystemInit+0x28>)
 8000a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f002 f8c8 	bl	8002be8 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f7ff ff67 	bl	8000930 <Error_Handler>
  }

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000100 	.word	0x20000100
 8000a6c:	40004400 	.word	0x40004400

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aca:	230c      	movs	r3, #12
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ada:	2307      	movs	r3, #7
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_MspInit+0x8c>)
 8000ae6:	f000 fca1 	bl	800142c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b06:	e003      	b.n	8000b10 <LoopCopyDataInit>

08000b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b0e:	3104      	adds	r1, #4

08000b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b18:	d3f6      	bcc.n	8000b08 <CopyDataInit>
  ldr  r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b1c:	e002      	b.n	8000b24 <LoopFillZerobss>

08000b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b20:	f842 3b04 	str.w	r3, [r2], #4

08000b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b28:	d3f9      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ff61 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 fc25 	bl	800337c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fe27 	bl	8000784 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b3c:	0800341c 	.word	0x0800341c
  ldr  r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b4c:	20000144 	.word	0x20000144

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f92b 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fed6 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f943 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f90b 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000140 	.word	0x20000140

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000140 	.word	0x20000140

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff feda 	bl	8000c20 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e099      	b.n	8000fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2202      	movs	r2, #2
 8000e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e98:	e00f      	b.n	8000eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e9a:	f7ff fec1 	bl	8000c20 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d908      	bls.n	8000eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e078      	b.n	8000fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e8      	bne.n	8000e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_DMA_Init+0x158>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d107      	bne.n	8000f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f023 0307 	bic.w	r3, r3, #7
 8000f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d117      	bne.n	8000f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00e      	beq.n	8000f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f9e9 	bl	8001338 <DMA_CheckFifoParam>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e016      	b.n	8000fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f9a0 	bl	80012cc <DMA_CalcBaseAndBitshift>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	223f      	movs	r2, #63	; 0x3f
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	f010803f 	.word	0xf010803f

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_DMA_IRQHandler+0x258>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_DMA_IRQHandler+0x25c>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0a9b      	lsrs	r3, r3, #10
 8000fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01a      	beq.n	8001024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0204 	bic.w	r2, r2, #4
 800100a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001010:	2208      	movs	r2, #8
 8001012:	409a      	lsls	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101c:	f043 0201 	orr.w	r2, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	2201      	movs	r2, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d012      	beq.n	800105a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001046:	2201      	movs	r2, #1
 8001048:	409a      	lsls	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001052:	f043 0202 	orr.w	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105e:	2204      	movs	r2, #4
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d012      	beq.n	8001090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	2204      	movs	r2, #4
 800107e:	409a      	lsls	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	f043 0204 	orr.w	r2, r3, #4
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	2210      	movs	r2, #16
 8001096:	409a      	lsls	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d043      	beq.n	8001128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03c      	beq.n	8001128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	2210      	movs	r2, #16
 80010b4:	409a      	lsls	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d018      	beq.n	80010fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d024      	beq.n	8001128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
 80010e6:	e01f      	b.n	8001128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01b      	beq.n	8001128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	4798      	blx	r3
 80010f8:	e016      	b.n	8001128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0208 	bic.w	r2, r2, #8
 8001116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112c:	2220      	movs	r2, #32
 800112e:	409a      	lsls	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 808e 	beq.w	8001256 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8086 	beq.w	8001256 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114e:	2220      	movs	r2, #32
 8001150:	409a      	lsls	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b05      	cmp	r3, #5
 8001160:	d136      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0216 	bic.w	r2, r2, #22
 8001170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <HAL_DMA_IRQHandler+0x1da>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0208 	bic.w	r2, r2, #8
 80011a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a6:	223f      	movs	r2, #63	; 0x3f
 80011a8:	409a      	lsls	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07d      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	4798      	blx	r3
        }
        return;
 80011ce:	e078      	b.n	80012c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d01c      	beq.n	8001218 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d108      	bne.n	80011fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d030      	beq.n	8001256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
 80011fc:	e02b      	b.n	8001256 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	2b00      	cmp	r3, #0
 8001204:	d027      	beq.n	8001256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
 800120e:	e022      	b.n	8001256 <HAL_DMA_IRQHandler+0x29e>
 8001210:	20000000 	.word	0x20000000
 8001214:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0210 	bic.w	r2, r2, #16
 8001234:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	2b00      	cmp	r3, #0
 800125c:	d032      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d022      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2205      	movs	r2, #5
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	429a      	cmp	r2, r3
 800128c:	d307      	bcc.n	800129e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f2      	bne.n	8001282 <HAL_DMA_IRQHandler+0x2ca>
 800129c:	e000      	b.n	80012a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800129e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
 80012c0:	e000      	b.n	80012c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012c2:	bf00      	nop
    }
  }
}
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop

080012cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b10      	subs	r3, #16
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <DMA_CalcBaseAndBitshift+0x64>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <DMA_CalcBaseAndBitshift+0x68>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d909      	bls.n	800130e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
 800130c:	e007      	b.n	800131e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	aaaaaaab 	.word	0xaaaaaaab
 8001334:	08003404 	.word	0x08003404

08001338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d11f      	bne.n	8001392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d855      	bhi.n	8001404 <DMA_CheckFifoParam+0xcc>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <DMA_CheckFifoParam+0x28>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001383 	.word	0x08001383
 8001368:	08001371 	.word	0x08001371
 800136c:	08001405 	.word	0x08001405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d045      	beq.n	8001408 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001380:	e042      	b.n	8001408 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800138a:	d13f      	bne.n	800140c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001390:	e03c      	b.n	800140c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800139a:	d121      	bne.n	80013e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d836      	bhi.n	8001410 <DMA_CheckFifoParam+0xd8>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <DMA_CheckFifoParam+0x70>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013b9 	.word	0x080013b9
 80013ac:	080013bf 	.word	0x080013bf
 80013b0:	080013b9 	.word	0x080013b9
 80013b4:	080013d1 	.word	0x080013d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
      break;
 80013bc:	e02f      	b.n	800141e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d024      	beq.n	8001414 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013ce:	e021      	b.n	8001414 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013d8:	d11e      	bne.n	8001418 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013de:	e01b      	b.n	8001418 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d902      	bls.n	80013ec <DMA_CheckFifoParam+0xb4>
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d003      	beq.n	80013f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013ea:	e018      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
      break;
 80013f0:	e015      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
      break;
 8001402:	e00b      	b.n	800141c <DMA_CheckFifoParam+0xe4>
      break;
 8001404:	bf00      	nop
 8001406:	e00a      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 8001408:	bf00      	nop
 800140a:	e008      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 800140c:	bf00      	nop
 800140e:	e006      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 8001410:	bf00      	nop
 8001412:	e004      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 8001414:	bf00      	nop
 8001416:	e002      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;   
 8001418:	bf00      	nop
 800141a:	e000      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 800141c:	bf00      	nop
    }
  } 
  
  return status; 
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e159      	b.n	80016fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8148 	bne.w	80016f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d00b      	beq.n	8001486 <HAL_GPIO_Init+0x5a>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147a:	2b11      	cmp	r3, #17
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b12      	cmp	r3, #18
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0xfc>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d123      	bne.n	8001570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	69b9      	ldr	r1, [r7, #24]
 800156c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0203 	and.w	r2, r3, #3
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80a2 	beq.w	80016f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_GPIO_Init+0x2e4>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_GPIO_Init+0x2e4>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_GPIO_Init+0x2e4>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ce:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a48      	ldr	r2, [pc, #288]	; (8001718 <HAL_GPIO_Init+0x2ec>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x202>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a47      	ldr	r2, [pc, #284]	; (800171c <HAL_GPIO_Init+0x2f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x1fe>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_GPIO_Init+0x2f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x1fa>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a45      	ldr	r2, [pc, #276]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x1f6>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a44      	ldr	r2, [pc, #272]	; (8001728 <HAL_GPIO_Init+0x2fc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x1f2>
 800161a:	2304      	movs	r3, #4
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x204>
 800161e:	2307      	movs	r3, #7
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x204>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x204>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x204>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x204>
 800162e:	2300      	movs	r3, #0
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001640:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_GPIO_Init+0x300>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001672:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_GPIO_Init+0x300>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_GPIO_Init+0x300>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_GPIO_Init+0x300>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_GPIO_Init+0x300>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c6:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_GPIO_Init+0x300>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_GPIO_Init+0x300>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_GPIO_Init+0x300>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	f67f aea2 	bls.w	8001448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001704:	bf00      	nop
 8001706:	3724      	adds	r7, #36	; 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e128      	b.n	80019c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a90      	ldr	r2, [pc, #576]	; (80019d0 <HAL_I2S_Init+0x26c>)
 800178e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe ff5d 	bl	8000650 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2202      	movs	r2, #2
 80017b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d060      	beq.n	8001884 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80017ca:	2310      	movs	r3, #16
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e001      	b.n	80017d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d802      	bhi.n	80017e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f001 f9a4 	bl	8002b30 <HAL_RCCEx_GetPeriphCLKFreq>
 80017e8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f2:	d125      	bne.n	8001840 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d010      	beq.n	800181e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	fbb2 f2f3 	udiv	r2, r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	3305      	adds	r3, #5
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e01f      	b.n	800185e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	fbb2 f2f3 	udiv	r2, r2, r3
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	3305      	adds	r3, #5
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e00e      	b.n	800185e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fbb2 f2f3 	udiv	r2, r2, r3
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	3305      	adds	r3, #5
 800185c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4a5c      	ldr	r2, [pc, #368]	; (80019d4 <HAL_I2S_Init+0x270>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e003      	b.n	800188c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001884:	2302      	movs	r3, #2
 8001886:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d902      	bls.n	8001898 <HAL_I2S_Init+0x134>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2bff      	cmp	r3, #255	; 0xff
 8001896:	d907      	bls.n	80018a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0210 	orr.w	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e08f      	b.n	80019c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	ea42 0103 	orr.w	r1, r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018c6:	f023 030f 	bic.w	r3, r3, #15
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6851      	ldr	r1, [r2, #4]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68d2      	ldr	r2, [r2, #12]
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6992      	ldr	r2, [r2, #24]
 80018de:	430a      	orrs	r2, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d161      	bne.n	80019b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_I2S_Init+0x274>)
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_I2S_Init+0x278>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_I2S_Init+0x1a4>
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_I2S_Init+0x27c>)
 8001906:	e001      	b.n	800190c <HAL_I2S_Init+0x1a8>
 8001908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4932      	ldr	r1, [pc, #200]	; (80019dc <HAL_I2S_Init+0x278>)
 8001914:	428a      	cmp	r2, r1
 8001916:	d101      	bne.n	800191c <HAL_I2S_Init+0x1b8>
 8001918:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <HAL_I2S_Init+0x27c>)
 800191a:	e001      	b.n	8001920 <HAL_I2S_Init+0x1bc>
 800191c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001920:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001924:	f023 030f 	bic.w	r3, r3, #15
 8001928:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <HAL_I2S_Init+0x278>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_I2S_Init+0x1d4>
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_I2S_Init+0x27c>)
 8001936:	e001      	b.n	800193c <HAL_I2S_Init+0x1d8>
 8001938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800193c:	2202      	movs	r2, #2
 800193e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_I2S_Init+0x278>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_I2S_Init+0x1ea>
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_I2S_Init+0x27c>)
 800194c:	e001      	b.n	8001952 <HAL_I2S_Init+0x1ee>
 800194e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195e:	d003      	beq.n	8001968 <HAL_I2S_Init+0x204>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e001      	b.n	8001974 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	b299      	uxth	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800198a:	4303      	orrs	r3, r0
 800198c:	b29b      	uxth	r3, r3
 800198e:	430b      	orrs	r3, r1
 8001990:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001992:	4313      	orrs	r3, r2
 8001994:	b29a      	uxth	r2, r3
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	4313      	orrs	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_I2S_Init+0x278>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_I2S_Init+0x24c>
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_I2S_Init+0x27c>)
 80019ae:	e001      	b.n	80019b4 <HAL_I2S_Init+0x250>
 80019b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019b4:	897a      	ldrh	r2, [r7, #10]
 80019b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	08001ac7 	.word	0x08001ac7
 80019d4:	cccccccd 	.word	0xcccccccd
 80019d8:	08001bdd 	.word	0x08001bdd
 80019dc:	40003800 	.word	0x40003800
 80019e0:	40003400 	.word	0x40003400

080019e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	1c9a      	adds	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffc2 	bl	80019e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	1c9a      	adds	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10e      	bne.n	8001abe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001aae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe ff19 	bl	80008f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d13a      	bne.n	8001b58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d109      	bne.n	8001b00 <I2S_IRQHandler+0x3a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d102      	bne.n	8001b00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffb4 	bl	8001a68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d126      	bne.n	8001b58 <I2S_IRQHandler+0x92>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d11f      	bne.n	8001b58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff50 	bl	80019f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d136      	bne.n	8001bd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d109      	bne.n	8001b82 <I2S_IRQHandler+0xbc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d102      	bne.n	8001b82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff45 	bl	8001a0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d122      	bne.n	8001bd2 <I2S_IRQHandler+0x10c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d11b      	bne.n	8001bd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ba8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff13 	bl	80019f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4aa2      	ldr	r2, [pc, #648]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001bf6:	4ba2      	ldr	r3, [pc, #648]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bf8:	e001      	b.n	8001bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a9b      	ldr	r2, [pc, #620]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c16:	e001      	b.n	8001c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c28:	d004      	beq.n	8001c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8099 	bne.w	8001d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d107      	bne.n	8001c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f925 	bl	8001e98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f9c8 	bl	8001ff8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d13a      	bne.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d035      	beq.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7e      	ldr	r2, [pc, #504]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c88:	e001      	b.n	8001c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4979      	ldr	r1, [pc, #484]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c96:	428b      	cmp	r3, r1
 8001c98:	d101      	bne.n	8001c9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001c9a:	4b79      	ldr	r3, [pc, #484]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c9c:	e001      	b.n	8001ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ca6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fe88 	bl	80019f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	f040 80be 	bne.w	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80b8 	beq.w	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d1a:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d1c:	e001      	b.n	8001d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4954      	ldr	r1, [pc, #336]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d2a:	428b      	cmp	r3, r1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d30:	e001      	b.n	8001d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fe4a 	bl	80019f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d64:	e084      	b.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d107      	bne.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8be 	bl	8001efc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d107      	bne.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f8fd 	bl	8001f94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d12f      	bne.n	8001e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d02a      	beq.n	8001e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dbc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dca:	e001      	b.n	8001dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4929      	ldr	r1, [pc, #164]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dde:	e001      	b.n	8001de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fdfa 	bl	80019f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d131      	bne.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d02c      	beq.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e24:	e001      	b.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e32:	428b      	cmp	r3, r1
 8001e34:	d101      	bne.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e38:	e001      	b.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e52:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fdc5 	bl	80019f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e6e:	e000      	b.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e70:	bf00      	nop
}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40003800 	.word	0x40003800
 8001e80:	40003400 	.word	0x40003400

08001e84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c99      	adds	r1, r3, #2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d113      	bne.n	8001ef2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffc9 	bl	8001e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	1c99      	adds	r1, r3, #2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f0e:	8819      	ldrh	r1, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <I2SEx_TxISR_I2SExt+0x90>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <I2SEx_TxISR_I2SExt+0x22>
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <I2SEx_TxISR_I2SExt+0x94>)
 8001f1c:	e001      	b.n	8001f22 <I2SEx_TxISR_I2SExt+0x26>
 8001f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f22:	460a      	mov	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d121      	bne.n	8001f82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <I2SEx_TxISR_I2SExt+0x90>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <I2SEx_TxISR_I2SExt+0x50>
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <I2SEx_TxISR_I2SExt+0x94>)
 8001f4a:	e001      	b.n	8001f50 <I2SEx_TxISR_I2SExt+0x54>
 8001f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <I2SEx_TxISR_I2SExt+0x90>)
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d101      	bne.n	8001f60 <I2SEx_TxISR_I2SExt+0x64>
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <I2SEx_TxISR_I2SExt+0x94>)
 8001f5e:	e001      	b.n	8001f64 <I2SEx_TxISR_I2SExt+0x68>
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff81 	bl	8001e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	40003400 	.word	0x40003400

08001f94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68d8      	ldr	r0, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	1c99      	adds	r1, r3, #2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fac:	b282      	uxth	r2, r0
 8001fae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d113      	bne.n	8001ff0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ff4a 	bl	8001e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <I2SEx_RxISR_I2SExt+0x90>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <I2SEx_RxISR_I2SExt+0x16>
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <I2SEx_RxISR_I2SExt+0x94>)
 800200c:	e001      	b.n	8002012 <I2SEx_RxISR_I2SExt+0x1a>
 800200e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002012:	68d8      	ldr	r0, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	1c99      	adds	r1, r3, #2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800201e:	b282      	uxth	r2, r0
 8002020:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d121      	bne.n	800207e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <I2SEx_RxISR_I2SExt+0x90>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <I2SEx_RxISR_I2SExt+0x50>
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <I2SEx_RxISR_I2SExt+0x94>)
 8002046:	e001      	b.n	800204c <I2SEx_RxISR_I2SExt+0x54>
 8002048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	490d      	ldr	r1, [pc, #52]	; (8002088 <I2SEx_RxISR_I2SExt+0x90>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d101      	bne.n	800205c <I2SEx_RxISR_I2SExt+0x64>
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <I2SEx_RxISR_I2SExt+0x94>)
 800205a:	e001      	b.n	8002060 <I2SEx_RxISR_I2SExt+0x68>
 800205c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002060:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002064:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff03 	bl	8001e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40003800 	.word	0x40003800
 800208c:	40003400 	.word	0x40003400

08002090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e25b      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d075      	beq.n	800219a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ae:	4ba3      	ldr	r3, [pc, #652]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d00c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4ba0      	ldr	r3, [pc, #640]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d112      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4b9d      	ldr	r3, [pc, #628]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	4b99      	ldr	r3, [pc, #612]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d05b      	beq.n	8002198 <HAL_RCC_OscConfig+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d157      	bne.n	8002198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e236      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x74>
 80020f6:	4b91      	ldr	r3, [pc, #580]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a8a      	ldr	r2, [pc, #552]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002128:	4b84      	ldr	r3, [pc, #528]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a83      	ldr	r2, [pc, #524]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a80      	ldr	r2, [pc, #512]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fd6a 	bl	8000c20 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fd66 	bl	8000c20 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1fb      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xc0>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fd56 	bl	8000c20 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fd52 	bl	8000c20 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1e7      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0xe8>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a6:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b5c      	ldr	r3, [pc, #368]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1bb      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4952      	ldr	r1, [pc, #328]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <HAL_RCC_OscConfig+0x2b0>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe fd0b 	bl	8000c20 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220e:	f7fe fd07 	bl	8000c20 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e19c      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4940      	ldr	r1, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_OscConfig+0x2b0>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fcea 	bl	8000c20 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe fce6 	bl	8000c20 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e17b      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d030      	beq.n	80022dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x2b4>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fcca 	bl	8000c20 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe fcc6 	bl	8000c20 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e15b      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x200>
 80022ae:	e015      	b.n	80022dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x2b4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fcb3 	bl	8000c20 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe fcaf 	bl	8000c20 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e144      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a0 	beq.w	800242a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_RCC_OscConfig+0x2b8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe fc75 	bl	8000c20 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e011      	b.n	800235e <HAL_RCC_OscConfig+0x2ce>
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	42470000 	.word	0x42470000
 8002344:	42470e80 	.word	0x42470e80
 8002348:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fc68 	bl	8000c20 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0fd      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x2f0>
 8002372:	4b7d      	ldr	r3, [pc, #500]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a7c      	ldr	r2, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x32a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002388:	4b77      	ldr	r3, [pc, #476]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a76      	ldr	r2, [pc, #472]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	4b74      	ldr	r3, [pc, #464]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a73      	ldr	r2, [pc, #460]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x32a>
 80023a2:	4b71      	ldr	r3, [pc, #452]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a70      	ldr	r2, [pc, #448]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	4b6e      	ldr	r3, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a6d      	ldr	r2, [pc, #436]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fc2d 	bl	8000c20 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fc29 	bl	8000c20 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0bc      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x33a>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fc17 	bl	8000c20 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fc13 	bl	8000c20 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0a6      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b56      	ldr	r3, [pc, #344]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b52      	ldr	r3, [pc, #328]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8092 	beq.w	8002558 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d05c      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d141      	bne.n	80024cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b48      	ldr	r3, [pc, #288]	; (800256c <HAL_RCC_OscConfig+0x4dc>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe fbe7 	bl	8000c20 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe fbe3 	bl	8000c20 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e078      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4933      	ldr	r1, [pc, #204]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fbbc 	bl	8000c20 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fbb8 	bl	8000c20 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04d      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x41c>
 80024ca:	e045      	b.n	8002558 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x4dc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fba5 	bl	8000c20 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fba1 	bl	8000c20 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e036      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x44a>
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e029      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_RCC_OscConfig+0x4d8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	429a      	cmp	r2, r3
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d115      	bne.n	8002554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002534:	4293      	cmp	r3, r2
 8002536:	d10d      	bne.n	8002554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000
 8002568:	40023800 	.word	0x40023800
 800256c:	42470060 	.word	0x42470060

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cc      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d90c      	bls.n	80025ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d044      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d003      	beq.n	800262e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e067      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4934      	ldr	r1, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7fe fade 	bl	8000c20 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe fada 	bl	8000c20 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2b      	ldr	r3, [pc, #172]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d20c      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4601      	mov	r1, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	fa21 f303 	lsr.w	r3, r1, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fa3e 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00
 800272c:	40023800 	.word	0x40023800
 8002730:	080033ec 	.word	0x080033ec
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d007      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x32>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d008      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x38>
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 80b4 	bne.w	80028d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b5e      	ldr	r3, [pc, #376]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800276a:	60bb      	str	r3, [r7, #8]
       break;
 800276c:	e0b3      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276e:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002770:	60bb      	str	r3, [r7, #8]
      break;
 8002772:	e0b0      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002774:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800277c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277e:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d04a      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	f04f 0400 	mov.w	r4, #0
 8002794:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	ea03 0501 	and.w	r5, r3, r1
 80027a0:	ea04 0602 	and.w	r6, r4, r2
 80027a4:	4629      	mov	r1, r5
 80027a6:	4632      	mov	r2, r6
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	0154      	lsls	r4, r2, #5
 80027b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027b6:	014b      	lsls	r3, r1, #5
 80027b8:	4619      	mov	r1, r3
 80027ba:	4622      	mov	r2, r4
 80027bc:	1b49      	subs	r1, r1, r5
 80027be:	eb62 0206 	sbc.w	r2, r2, r6
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	f04f 0400 	mov.w	r4, #0
 80027ca:	0194      	lsls	r4, r2, #6
 80027cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027d0:	018b      	lsls	r3, r1, #6
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	eb64 0402 	sbc.w	r4, r4, r2
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	00e2      	lsls	r2, r4, #3
 80027e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027e6:	00d9      	lsls	r1, r3, #3
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	195b      	adds	r3, r3, r5
 80027ee:	eb44 0406 	adc.w	r4, r4, r6
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	0262      	lsls	r2, r4, #9
 80027fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002800:	0259      	lsls	r1, r3, #9
 8002802:	460b      	mov	r3, r1
 8002804:	4614      	mov	r4, r2
 8002806:	4618      	mov	r0, r3
 8002808:	4621      	mov	r1, r4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 0400 	mov.w	r4, #0
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	f7fd fcde 	bl	80001d4 <__aeabi_uldivmod>
 8002818:	4603      	mov	r3, r0
 800281a:	460c      	mov	r4, r1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	e049      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	f04f 0400 	mov.w	r4, #0
 800282a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	ea03 0501 	and.w	r5, r3, r1
 8002836:	ea04 0602 	and.w	r6, r4, r2
 800283a:	4629      	mov	r1, r5
 800283c:	4632      	mov	r2, r6
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	0154      	lsls	r4, r2, #5
 8002848:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800284c:	014b      	lsls	r3, r1, #5
 800284e:	4619      	mov	r1, r3
 8002850:	4622      	mov	r2, r4
 8002852:	1b49      	subs	r1, r1, r5
 8002854:	eb62 0206 	sbc.w	r2, r2, r6
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f04f 0400 	mov.w	r4, #0
 8002860:	0194      	lsls	r4, r2, #6
 8002862:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002866:	018b      	lsls	r3, r1, #6
 8002868:	1a5b      	subs	r3, r3, r1
 800286a:	eb64 0402 	sbc.w	r4, r4, r2
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800287c:	00d9      	lsls	r1, r3, #3
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	195b      	adds	r3, r3, r5
 8002884:	eb44 0406 	adc.w	r4, r4, r6
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	02a2      	lsls	r2, r4, #10
 8002892:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002896:	0299      	lsls	r1, r3, #10
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	4618      	mov	r0, r3
 800289e:	4621      	mov	r1, r4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f04f 0400 	mov.w	r4, #0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4623      	mov	r3, r4
 80028aa:	f7fd fc93 	bl	80001d4 <__aeabi_uldivmod>
 80028ae:	4603      	mov	r3, r0
 80028b0:	460c      	mov	r4, r1
 80028b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	60bb      	str	r3, [r7, #8]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028d2:	60bb      	str	r3, [r7, #8]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	68bb      	ldr	r3, [r7, #8]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	00f42400 	.word	0x00f42400
 80028e8:	007a1200 	.word	0x007a1200

080028ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000000 	.word	0x20000000

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002908:	f7ff fff0 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 800290c:	4601      	mov	r1, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4a03      	ldr	r2, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	080033fc 	.word	0x080033fc

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002930:	f7ff ffdc 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002934:	4601      	mov	r1, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0b5b      	lsrs	r3, r3, #13
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	080033fc 	.word	0x080033fc

08002954 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002978:	2b00      	cmp	r3, #0
 800297a:	d035      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800297c:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002982:	f7fe f94d 	bl	8000c20 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800298a:	f7fe f949 	bl	8000c20 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0ba      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299c:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	019a      	lsls	r2, r3, #6
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	071b      	lsls	r3, r3, #28
 80029b4:	495a      	ldr	r1, [pc, #360]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029c2:	f7fe f92d 	bl	8000c20 <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ca:	f7fe f929 	bl	8000c20 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e09a      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8083 	beq.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a12:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a43      	ldr	r2, [pc, #268]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe f8ff 	bl	8000c20 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe f8fb 	bl	8000c20 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e06c      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02f      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a72:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f8c9 	bl	8000c20 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe f8c5 	bl	8000c20 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e034      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ee      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ac0:	d10d      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad6:	4912      	ldr	r1, [pc, #72]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
 8002adc:	e005      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ae4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ae8:	6093      	str	r3, [r2, #8]
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af6:	490a      	ldr	r1, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7c1a      	ldrb	r2, [r3, #16]
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b0e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	42470068 	.word	0x42470068
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42470e40 	.word	0x42470e40
 8002b2c:	424711e0 	.word	0x424711e0

08002b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d13d      	bne.n	8002bca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b56:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d12f      	bne.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002b64:	617b      	str	r3, [r7, #20]
          break;
 8002b66:	e02f      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b74:	d108      	bne.n	8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e007      	b.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb2:	0f1b      	lsrs	r3, r3, #28
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
          break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
          break;
 8002bc6:	bf00      	nop
        }
      }
      break;
 8002bc8:	bf00      	nop
    }
  }
  return frequency;
 8002bca:	697b      	ldr	r3, [r7, #20]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00bb8000 	.word	0x00bb8000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	00f42400 	.word	0x00f42400

08002be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03f      	b.n	8002c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd ff2e 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f829 	bl	8002c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cc6:	f023 030c 	bic.w	r3, r3, #12
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf2:	f040 818b 	bne.w	800300c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4ac1      	ldr	r2, [pc, #772]	; (8003000 <UART_SetConfig+0x37c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x88>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4abf      	ldr	r2, [pc, #764]	; (8003004 <UART_SetConfig+0x380>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 80bd 	bne.w	8002e86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d0c:	f7ff fe0e 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8002d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	461d      	mov	r5, r3
 8002d16:	f04f 0600 	mov.w	r6, #0
 8002d1a:	46a8      	mov	r8, r5
 8002d1c:	46b1      	mov	r9, r6
 8002d1e:	eb18 0308 	adds.w	r3, r8, r8
 8002d22:	eb49 0409 	adc.w	r4, r9, r9
 8002d26:	4698      	mov	r8, r3
 8002d28:	46a1      	mov	r9, r4
 8002d2a:	eb18 0805 	adds.w	r8, r8, r5
 8002d2e:	eb49 0906 	adc.w	r9, r9, r6
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d46:	4688      	mov	r8, r1
 8002d48:	4691      	mov	r9, r2
 8002d4a:	eb18 0005 	adds.w	r0, r8, r5
 8002d4e:	eb49 0106 	adc.w	r1, r9, r6
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	461d      	mov	r5, r3
 8002d58:	f04f 0600 	mov.w	r6, #0
 8002d5c:	196b      	adds	r3, r5, r5
 8002d5e:	eb46 0406 	adc.w	r4, r6, r6
 8002d62:	461a      	mov	r2, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	f7fd fa35 	bl	80001d4 <__aeabi_uldivmod>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4ba5      	ldr	r3, [pc, #660]	; (8003008 <UART_SetConfig+0x384>)
 8002d72:	fba3 2302 	umull	r2, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	461d      	mov	r5, r3
 8002d80:	f04f 0600 	mov.w	r6, #0
 8002d84:	46a9      	mov	r9, r5
 8002d86:	46b2      	mov	sl, r6
 8002d88:	eb19 0309 	adds.w	r3, r9, r9
 8002d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d90:	4699      	mov	r9, r3
 8002d92:	46a2      	mov	sl, r4
 8002d94:	eb19 0905 	adds.w	r9, r9, r5
 8002d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002db0:	4689      	mov	r9, r1
 8002db2:	4692      	mov	sl, r2
 8002db4:	eb19 0005 	adds.w	r0, r9, r5
 8002db8:	eb4a 0106 	adc.w	r1, sl, r6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	196b      	adds	r3, r5, r5
 8002dc8:	eb46 0406 	adc.w	r4, r6, r6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	f7fd fa00 	bl	80001d4 <__aeabi_uldivmod>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <UART_SetConfig+0x384>)
 8002ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2164      	movs	r1, #100	; 0x64
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a86      	ldr	r2, [pc, #536]	; (8003008 <UART_SetConfig+0x384>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dfc:	4498      	add	r8, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	461d      	mov	r5, r3
 8002e02:	f04f 0600 	mov.w	r6, #0
 8002e06:	46a9      	mov	r9, r5
 8002e08:	46b2      	mov	sl, r6
 8002e0a:	eb19 0309 	adds.w	r3, r9, r9
 8002e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e12:	4699      	mov	r9, r3
 8002e14:	46a2      	mov	sl, r4
 8002e16:	eb19 0905 	adds.w	r9, r9, r5
 8002e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e32:	4689      	mov	r9, r1
 8002e34:	4692      	mov	sl, r2
 8002e36:	eb19 0005 	adds.w	r0, r9, r5
 8002e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	461d      	mov	r5, r3
 8002e44:	f04f 0600 	mov.w	r6, #0
 8002e48:	196b      	adds	r3, r5, r5
 8002e4a:	eb46 0406 	adc.w	r4, r6, r6
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4623      	mov	r3, r4
 8002e52:	f7fd f9bf 	bl	80001d4 <__aeabi_uldivmod>
 8002e56:	4603      	mov	r3, r0
 8002e58:	460c      	mov	r4, r1
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <UART_SetConfig+0x384>)
 8002e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2164      	movs	r1, #100	; 0x64
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	4a65      	ldr	r2, [pc, #404]	; (8003008 <UART_SetConfig+0x384>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	f003 0207 	and.w	r2, r3, #7
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4442      	add	r2, r8
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e26f      	b.n	8003366 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff fd3d 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8002e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	461d      	mov	r5, r3
 8002e90:	f04f 0600 	mov.w	r6, #0
 8002e94:	46a8      	mov	r8, r5
 8002e96:	46b1      	mov	r9, r6
 8002e98:	eb18 0308 	adds.w	r3, r8, r8
 8002e9c:	eb49 0409 	adc.w	r4, r9, r9
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	46a1      	mov	r9, r4
 8002ea4:	eb18 0805 	adds.w	r8, r8, r5
 8002ea8:	eb49 0906 	adc.w	r9, r9, r6
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ec0:	4688      	mov	r8, r1
 8002ec2:	4691      	mov	r9, r2
 8002ec4:	eb18 0005 	adds.w	r0, r8, r5
 8002ec8:	eb49 0106 	adc.w	r1, r9, r6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	196b      	adds	r3, r5, r5
 8002ed8:	eb46 0406 	adc.w	r4, r6, r6
 8002edc:	461a      	mov	r2, r3
 8002ede:	4623      	mov	r3, r4
 8002ee0:	f7fd f978 	bl	80001d4 <__aeabi_uldivmod>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <UART_SetConfig+0x384>)
 8002eec:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	461d      	mov	r5, r3
 8002efa:	f04f 0600 	mov.w	r6, #0
 8002efe:	46a9      	mov	r9, r5
 8002f00:	46b2      	mov	sl, r6
 8002f02:	eb19 0309 	adds.w	r3, r9, r9
 8002f06:	eb4a 040a 	adc.w	r4, sl, sl
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	46a2      	mov	sl, r4
 8002f0e:	eb19 0905 	adds.w	r9, r9, r5
 8002f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f2a:	4689      	mov	r9, r1
 8002f2c:	4692      	mov	sl, r2
 8002f2e:	eb19 0005 	adds.w	r0, r9, r5
 8002f32:	eb4a 0106 	adc.w	r1, sl, r6
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	196b      	adds	r3, r5, r5
 8002f42:	eb46 0406 	adc.w	r4, r6, r6
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	f7fd f943 	bl	80001d4 <__aeabi_uldivmod>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <UART_SetConfig+0x384>)
 8002f56:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2164      	movs	r1, #100	; 0x64
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <UART_SetConfig+0x384>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f76:	4498      	add	r8, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	f04f 0600 	mov.w	r6, #0
 8002f80:	46a9      	mov	r9, r5
 8002f82:	46b2      	mov	sl, r6
 8002f84:	eb19 0309 	adds.w	r3, r9, r9
 8002f88:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	46a2      	mov	sl, r4
 8002f90:	eb19 0905 	adds.w	r9, r9, r5
 8002f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fac:	4689      	mov	r9, r1
 8002fae:	4692      	mov	sl, r2
 8002fb0:	eb19 0005 	adds.w	r0, r9, r5
 8002fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	461d      	mov	r5, r3
 8002fbe:	f04f 0600 	mov.w	r6, #0
 8002fc2:	196b      	adds	r3, r5, r5
 8002fc4:	eb46 0406 	adc.w	r4, r6, r6
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	f7fd f902 	bl	80001d4 <__aeabi_uldivmod>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <UART_SetConfig+0x384>)
 8002fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	2164      	movs	r1, #100	; 0x64
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3332      	adds	r3, #50	; 0x32
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <UART_SetConfig+0x384>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	f003 0207 	and.w	r2, r3, #7
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4442      	add	r2, r8
 8002ffc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ffe:	e1b2      	b.n	8003366 <UART_SetConfig+0x6e2>
 8003000:	40011000 	.word	0x40011000
 8003004:	40011400 	.word	0x40011400
 8003008:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4ad7      	ldr	r2, [pc, #860]	; (8003370 <UART_SetConfig+0x6ec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d005      	beq.n	8003022 <UART_SetConfig+0x39e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4ad6      	ldr	r2, [pc, #856]	; (8003374 <UART_SetConfig+0x6f0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f040 80d1 	bne.w	80031c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003022:	f7ff fc83 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	469a      	mov	sl, r3
 800302c:	f04f 0b00 	mov.w	fp, #0
 8003030:	46d0      	mov	r8, sl
 8003032:	46d9      	mov	r9, fp
 8003034:	eb18 0308 	adds.w	r3, r8, r8
 8003038:	eb49 0409 	adc.w	r4, r9, r9
 800303c:	4698      	mov	r8, r3
 800303e:	46a1      	mov	r9, r4
 8003040:	eb18 080a 	adds.w	r8, r8, sl
 8003044:	eb49 090b 	adc.w	r9, r9, fp
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800305c:	4688      	mov	r8, r1
 800305e:	4691      	mov	r9, r2
 8003060:	eb1a 0508 	adds.w	r5, sl, r8
 8003064:	eb4b 0609 	adc.w	r6, fp, r9
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	0094      	lsls	r4, r2, #2
 800307c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003080:	008b      	lsls	r3, r1, #2
 8003082:	461a      	mov	r2, r3
 8003084:	4623      	mov	r3, r4
 8003086:	4628      	mov	r0, r5
 8003088:	4631      	mov	r1, r6
 800308a:	f7fd f8a3 	bl	80001d4 <__aeabi_uldivmod>
 800308e:	4603      	mov	r3, r0
 8003090:	460c      	mov	r4, r1
 8003092:	461a      	mov	r2, r3
 8003094:	4bb8      	ldr	r3, [pc, #736]	; (8003378 <UART_SetConfig+0x6f4>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	469b      	mov	fp, r3
 80030a4:	f04f 0c00 	mov.w	ip, #0
 80030a8:	46d9      	mov	r9, fp
 80030aa:	46e2      	mov	sl, ip
 80030ac:	eb19 0309 	adds.w	r3, r9, r9
 80030b0:	eb4a 040a 	adc.w	r4, sl, sl
 80030b4:	4699      	mov	r9, r3
 80030b6:	46a2      	mov	sl, r4
 80030b8:	eb19 090b 	adds.w	r9, r9, fp
 80030bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d4:	4689      	mov	r9, r1
 80030d6:	4692      	mov	sl, r2
 80030d8:	eb1b 0509 	adds.w	r5, fp, r9
 80030dc:	eb4c 060a 	adc.w	r6, ip, sl
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	0094      	lsls	r4, r2, #2
 80030f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030f8:	008b      	lsls	r3, r1, #2
 80030fa:	461a      	mov	r2, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	4628      	mov	r0, r5
 8003100:	4631      	mov	r1, r6
 8003102:	f7fd f867 	bl	80001d4 <__aeabi_uldivmod>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	461a      	mov	r2, r3
 800310c:	4b9a      	ldr	r3, [pc, #616]	; (8003378 <UART_SetConfig+0x6f4>)
 800310e:	fba3 1302 	umull	r1, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2164      	movs	r1, #100	; 0x64
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a95      	ldr	r2, [pc, #596]	; (8003378 <UART_SetConfig+0x6f4>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312c:	4498      	add	r8, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	469b      	mov	fp, r3
 8003132:	f04f 0c00 	mov.w	ip, #0
 8003136:	46d9      	mov	r9, fp
 8003138:	46e2      	mov	sl, ip
 800313a:	eb19 0309 	adds.w	r3, r9, r9
 800313e:	eb4a 040a 	adc.w	r4, sl, sl
 8003142:	4699      	mov	r9, r3
 8003144:	46a2      	mov	sl, r4
 8003146:	eb19 090b 	adds.w	r9, r9, fp
 800314a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800315a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800315e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003162:	4689      	mov	r9, r1
 8003164:	4692      	mov	sl, r2
 8003166:	eb1b 0509 	adds.w	r5, fp, r9
 800316a:	eb4c 060a 	adc.w	r6, ip, sl
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4619      	mov	r1, r3
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	f04f 0400 	mov.w	r4, #0
 8003180:	0094      	lsls	r4, r2, #2
 8003182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003186:	008b      	lsls	r3, r1, #2
 8003188:	461a      	mov	r2, r3
 800318a:	4623      	mov	r3, r4
 800318c:	4628      	mov	r0, r5
 800318e:	4631      	mov	r1, r6
 8003190:	f7fd f820 	bl	80001d4 <__aeabi_uldivmod>
 8003194:	4603      	mov	r3, r0
 8003196:	460c      	mov	r4, r1
 8003198:	461a      	mov	r2, r3
 800319a:	4b77      	ldr	r3, [pc, #476]	; (8003378 <UART_SetConfig+0x6f4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a72      	ldr	r2, [pc, #456]	; (8003378 <UART_SetConfig+0x6f4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4442      	add	r2, r8
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	e0d0      	b.n	8003366 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff fb9e 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	469a      	mov	sl, r3
 80031ce:	f04f 0b00 	mov.w	fp, #0
 80031d2:	46d0      	mov	r8, sl
 80031d4:	46d9      	mov	r9, fp
 80031d6:	eb18 0308 	adds.w	r3, r8, r8
 80031da:	eb49 0409 	adc.w	r4, r9, r9
 80031de:	4698      	mov	r8, r3
 80031e0:	46a1      	mov	r9, r4
 80031e2:	eb18 080a 	adds.w	r8, r8, sl
 80031e6:	eb49 090b 	adc.w	r9, r9, fp
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031fe:	4688      	mov	r8, r1
 8003200:	4691      	mov	r9, r2
 8003202:	eb1a 0508 	adds.w	r5, sl, r8
 8003206:	eb4b 0609 	adc.w	r6, fp, r9
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0094      	lsls	r4, r2, #2
 800321e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	4628      	mov	r0, r5
 800322a:	4631      	mov	r1, r6
 800322c:	f7fc ffd2 	bl	80001d4 <__aeabi_uldivmod>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	461a      	mov	r2, r3
 8003236:	4b50      	ldr	r3, [pc, #320]	; (8003378 <UART_SetConfig+0x6f4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	469b      	mov	fp, r3
 8003246:	f04f 0c00 	mov.w	ip, #0
 800324a:	46d9      	mov	r9, fp
 800324c:	46e2      	mov	sl, ip
 800324e:	eb19 0309 	adds.w	r3, r9, r9
 8003252:	eb4a 040a 	adc.w	r4, sl, sl
 8003256:	4699      	mov	r9, r3
 8003258:	46a2      	mov	sl, r4
 800325a:	eb19 090b 	adds.w	r9, r9, fp
 800325e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003276:	4689      	mov	r9, r1
 8003278:	4692      	mov	sl, r2
 800327a:	eb1b 0509 	adds.w	r5, fp, r9
 800327e:	eb4c 060a 	adc.w	r6, ip, sl
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	0094      	lsls	r4, r2, #2
 8003296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	461a      	mov	r2, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	4628      	mov	r0, r5
 80032a2:	4631      	mov	r1, r6
 80032a4:	f7fc ff96 	bl	80001d4 <__aeabi_uldivmod>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b32      	ldr	r3, [pc, #200]	; (8003378 <UART_SetConfig+0x6f4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <UART_SetConfig+0x6f4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	4498      	add	r8, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	469b      	mov	fp, r3
 80032d4:	f04f 0c00 	mov.w	ip, #0
 80032d8:	46d9      	mov	r9, fp
 80032da:	46e2      	mov	sl, ip
 80032dc:	eb19 0309 	adds.w	r3, r9, r9
 80032e0:	eb4a 040a 	adc.w	r4, sl, sl
 80032e4:	4699      	mov	r9, r3
 80032e6:	46a2      	mov	sl, r4
 80032e8:	eb19 090b 	adds.w	r9, r9, fp
 80032ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003304:	4689      	mov	r9, r1
 8003306:	4692      	mov	sl, r2
 8003308:	eb1b 0509 	adds.w	r5, fp, r9
 800330c:	eb4c 060a 	adc.w	r6, ip, sl
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4619      	mov	r1, r3
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	0094      	lsls	r4, r2, #2
 8003324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003328:	008b      	lsls	r3, r1, #2
 800332a:	461a      	mov	r2, r3
 800332c:	4623      	mov	r3, r4
 800332e:	4628      	mov	r0, r5
 8003330:	4631      	mov	r1, r6
 8003332:	f7fc ff4f 	bl	80001d4 <__aeabi_uldivmod>
 8003336:	4603      	mov	r3, r0
 8003338:	460c      	mov	r4, r1
 800333a:	461a      	mov	r2, r3
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <UART_SetConfig+0x6f4>)
 800333e:	fba3 1302 	umull	r1, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2164      	movs	r1, #100	; 0x64
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <UART_SetConfig+0x6f4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4442      	add	r2, r8
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	e7ff      	b.n	8003366 <UART_SetConfig+0x6e2>
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003370:	40011000 	.word	0x40011000
 8003374:	40011400 	.word	0x40011400
 8003378:	51eb851f 	.word	0x51eb851f

0800337c <__libc_init_array>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	4e0d      	ldr	r6, [pc, #52]	; (80033b4 <__libc_init_array+0x38>)
 8003380:	4c0d      	ldr	r4, [pc, #52]	; (80033b8 <__libc_init_array+0x3c>)
 8003382:	1ba4      	subs	r4, r4, r6
 8003384:	10a4      	asrs	r4, r4, #2
 8003386:	2500      	movs	r5, #0
 8003388:	42a5      	cmp	r5, r4
 800338a:	d109      	bne.n	80033a0 <__libc_init_array+0x24>
 800338c:	4e0b      	ldr	r6, [pc, #44]	; (80033bc <__libc_init_array+0x40>)
 800338e:	4c0c      	ldr	r4, [pc, #48]	; (80033c0 <__libc_init_array+0x44>)
 8003390:	f000 f820 	bl	80033d4 <_init>
 8003394:	1ba4      	subs	r4, r4, r6
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	2500      	movs	r5, #0
 800339a:	42a5      	cmp	r5, r4
 800339c:	d105      	bne.n	80033aa <__libc_init_array+0x2e>
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a4:	4798      	blx	r3
 80033a6:	3501      	adds	r5, #1
 80033a8:	e7ee      	b.n	8003388 <__libc_init_array+0xc>
 80033aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ae:	4798      	blx	r3
 80033b0:	3501      	adds	r5, #1
 80033b2:	e7f2      	b.n	800339a <__libc_init_array+0x1e>
 80033b4:	08003414 	.word	0x08003414
 80033b8:	08003414 	.word	0x08003414
 80033bc:	08003414 	.word	0x08003414
 80033c0:	08003418 	.word	0x08003418

080033c4 <memset>:
 80033c4:	4402      	add	r2, r0
 80033c6:	4603      	mov	r3, r0
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d100      	bne.n	80033ce <memset+0xa>
 80033cc:	4770      	bx	lr
 80033ce:	f803 1b01 	strb.w	r1, [r3], #1
 80033d2:	e7f9      	b.n	80033c8 <memset+0x4>

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
